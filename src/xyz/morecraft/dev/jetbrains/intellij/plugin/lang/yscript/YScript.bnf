{

    tokens=[
        X_DOT="."
        X_COMMA=","
        X_COLON=":"
        X_ASSIGN="regexp:\??="
        X_SEMICOLON=";"
        X_DOUBLE_COLON="::"
        X_OPEN_BRACKET="("
        X_CLOSE_BRACKET=")"
        X_OPEN_SQUARE_BRACKET="["
        X_CLOSE_SQUARE_BRACKET="]"
        //X_QUOTATION_MARK=\"

        V_STRING="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
        V_NUMBER="regexp:\d+(\.\d+)?"

        space='regexp:\s+'
//        comment="regexp://.*"
        comment="regexp:(/\*([^*]|(\*+[^*/]))*\*+/)|(//.*)"

        KEY_IMPORT="IMPORT"
        KEY_PROGRAM="PROGRAM"
        KEY_DEFINE="DEFINE"
        KEY_EXTENSION="EXTENSION"
        KEY_EXTERNAL="EXTERNAL"
        KEY_VAR="VAR"
        KEY_AS="AS"
        KEY_BEGIN="BEGIN"
        KEY_END="END"
        KEY_RETURN="RETURN"
        KEY_RETURNS="RETURNS"
        KEY_ARRAY="ARRAY"
        KEY_OF="OF"
        KEY_IF="IF"
        KEY_SHORT_IF="?"
        KEY_THEN="THEN"
        KEY_ELSE="ELSE"
        KEY_WITH="WITH"
        KEY_DO="DO"
        KEY_WHILE="WHILE"
        KEY_CREATE="CREATE"
        KEY_SORT="SORT"
        KEY_INDEX="INDEX"
        KEY_USING="USING"
        KEY_DELETE="DELETE"
        KEY_TRY="TRY"
        KEY_CATCH="CATCH"
        KEY_THROW="THROW"
        KEY_NEW="NEW"
        KEY_FOR="FOR"
        KEY_TO="TO"
        KEY_MERGE="MERGE"

        KEY_AND="AND"
        KEY_OR="OR"
        KEY_NEGATION="NOT"

        KEY_TRUE="TRUE"
        KEY_FALSE="FALSE"

        KEY_NULL="NULL"

        F_KEY_IS_INSTANCE="ISINSTANCE"
        F_KEY_IS_TYPE="ISTYPE"
        F_KEY_SIZE_OF="SIZEOF"
        F_KEY_IS_SET="ISSET"
        F_KEY_COPY_OF="COPYOF"
        F_KEY_IS_NULL="ISNULL"
        F_KEY_TYPE="TYPE"
        F_KEY_STRLEN="STRLEN"

        OP_LT="<"
        OP_GT=">"
        OP_LTE="<="
        OP_GTE=">="
        OP_PLUS="+"
        OP_MINUS="-"
        OP_MUL="*"
        OP_DIVIDE="/"
        OP_MODULO="%"
        OP_EQIALS="=="
        OP_NEQUALS="<>"

        IDENTIFIER="regexp:(\p{Alpha}\w*+)|(\{[\w.@\-]+\})"
    ]

    parserClass="xyz.morecraft.dev.jetbrains.intellij.plugin.lang.yscript.parser.YScriptParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="YScript"
    psiImplClassSuffix="Impl"
    psiPackage="xyz.morecraft.dev.jetbrains.intellij.plugin.lang.yscript.psi"
    psiImplPackage="xyz.morecraft.dev.jetbrains.intellij.plugin.lang.yscript.psi.impl"

    elementTypeHolderClass="xyz.morecraft.dev.jetbrains.intellij.plugin.lang.yscript.psi.YScriptTypes"
    elementTypeClass="xyz.morecraft.dev.jetbrains.intellij.plugin.lang.yscript.psi.YScriptElementType"
    tokenTypeClass="xyz.morecraft.dev.jetbrains.intellij.plugin.lang.yscript.psi.YScriptTokenType"

    psiImplUtilClass="xyz.morecraft.dev.jetbrains.intellij.plugin.lang.yscript.psi.impl.YScriptPsiImplUtil"
}

YScriptFile ::= fileContent

//noinspection BnfResolve
fileContent ::= structuralItem_ * {
   methods=[getName getImportNames getProgramNames];
   stubClass="xyz.morecraft.dev.jetbrains.intellij.plugin.lang.yscript.index.YScriptFileContentStub";
   extends="xyz.morecraft.dev.jetbrains.intellij.plugin.lang.yscript.psi.impl.YScriptStubbedElementImpl<?>";
   elementTypeFactory="xyz.morecraft.dev.jetbrains.intellij.plugin.lang.yscript.psi.stub.YScriptElementTypeFactory.stubFactory";
}

private structuralItem_ ::= !<<eof>> structuralItem {
   pin=1
   recoverWhile=structuralItemRecover
}

private structuralItemRecover ::= !(KEY_PROGRAM | KEY_IMPORT | KEY_DEFINE)

private structuralItem ::= (import | program | define) {pin=1}

import ::= KEY_IMPORT package X_SEMICOLON

//noinspection BnfResolve
program ::= programHeader programBody X_SEMICOLON {
    methods=[getName];
    stubClass="xyz.morecraft.dev.jetbrains.intellij.plugin.lang.yscript.index.YScriptProgramStub";
    extends="xyz.morecraft.dev.jetbrains.intellij.plugin.lang.yscript.psi.impl.YScriptStubbedElementImpl<?>";
    elementTypeFactory="xyz.morecraft.dev.jetbrains.intellij.plugin.lang.yscript.psi.stub.YScriptElementTypeFactory.stubFactory"
}

programHeader ::= KEY_PROGRAM package X_OPEN_BRACKET vars? X_CLOSE_BRACKET (KEY_RETURNS type)?

programBody ::= (block | externalProgram)

externalProgram ::= KEY_EXTERNAL V_STRING X_OPEN_BRACKET arguments? X_CLOSE_BRACKET

define ::= KEY_DEFINE type KEY_AS (KEY_EXTENSION KEY_OF type)? blockDefine X_SEMICOLON

package ::= IDENTIFIER (X_DOUBLE_COLON IDENTIFIER)*

private vars ::= var (X_COMMA var)*

var ::= KEY_VAR varDef

varDef ::= varName KEY_AS type {
    methods=[getName];
}

type ::= (KEY_ARRAY KEY_OF)? varName (X_COLON V_STRING)? {
    methods=[getName];
}

statement ::= (var | return | if | with | while | create | sort | index | delete | try | throw | for | assign | merge | anyCall)

if ::= KEY_IF expression KEY_THEN body (KEY_ELSE body)?

with ::= (withLoop | withObj)

withLoop ::= KEY_WITH varName KEY_AS expression KEY_DO body

withObj ::= KEY_WITH propertySimple KEY_DO body

while ::= KEY_WHILE expression KEY_DO body

create ::= KEY_CREATE propertySimple block?

sort ::= KEY_SORT propertySimple KEY_USING package;

index ::= KEY_INDEX propertySimple KEY_USING propertySimple;

delete ::= KEY_DELETE propertySimple

try ::= KEY_TRY block catchBlock+

catchBlock ::= KEY_CATCH X_OPEN_BRACKET var X_CLOSE_BRACKET block

throw ::= KEY_THROW (new | expression)

for ::= KEY_FOR propertySimple X_ASSIGN valNumber KEY_TO expression KEY_DO body

return ::= KEY_RETURN expression?;

assign ::= propertySimple X_ASSIGN (expression | new) {
    pin=2
}

merge ::= propertySimple KEY_MERGE propertySimple

new ::= KEY_NEW type block?

expression ::= (expressionTerm operator expression) | expressionTerm

expressionTerm ::= (expressionFactor operator expressionTerm) | expressionFactor

expressionFactor ::= (expressionDotted | expressionSimple | new)

expressionDotted ::= (expressionBraced | cast | anyCall) (X_DOT expressionFactor)?

expressionBraced ::= X_OPEN_BRACKET expression X_CLOSE_BRACKET

expressionSimple ::= KEY_NEGATION? (fIsInstance | fIsType | cast | anyCall | value | boolean | propertySimple | shortIf)

operator ::= (KEY_AND | KEY_OR | OP_LT | OP_GT | OP_LTE | OP_GTE | OP_PLUS | OP_MINUS | OP_MUL | OP_DIVIDE | OP_MODULO | OP_EQIALS | OP_NEQUALS)

boolean ::= (KEY_TRUE | KEY_FALSE)

cast ::= X_OPEN_BRACKET expressionFactor KEY_AS type X_CLOSE_BRACKET

private anyCall ::= fSizeOf | fIsSet | fCopyOf | fIsNull | fType | fStrlen | call

call ::= package X_OPEN_BRACKET arguments? X_CLOSE_BRACKET

shortIf ::= X_OPEN_BRACKET expression KEY_SHORT_IF expression X_COLON expression X_CLOSE_BRACKET

arguments ::= expression (X_COMMA expression)*

propertySimple ::= propertyBase (X_DOT propertyBase)*

propertyBase ::= varName bracketExpression? {
    methods=[getName];
}

bracketExpression ::= bracketSingleExpression | bracketDoubleExpression

private bracketSingleExpression ::= X_OPEN_SQUARE_BRACKET expression X_CLOSE_SQUARE_BRACKET

private bracketDoubleExpression ::= X_OPEN_SQUARE_BRACKET X_OPEN_SQUARE_BRACKET expression X_CLOSE_SQUARE_BRACKET X_CLOSE_SQUARE_BRACKET

value ::= (KEY_NULL | V_STRING | valNumber)

fIsInstance ::= propertySimple F_KEY_IS_INSTANCE X_OPEN_BRACKET type X_CLOSE_BRACKET
// TODO 'expression' instead of 'propertySimple'

fIsType ::= propertySimple F_KEY_IS_TYPE X_OPEN_BRACKET type X_CLOSE_BRACKET
// TODO 'expression' instead of 'propertySimple'

fSizeOf ::= F_KEY_SIZE_OF X_OPEN_BRACKET expression X_CLOSE_BRACKET

fIsSet ::= F_KEY_IS_SET X_OPEN_BRACKET expression X_CLOSE_BRACKET

fCopyOf ::= F_KEY_COPY_OF X_OPEN_BRACKET expression X_CLOSE_BRACKET

fIsNull ::= F_KEY_IS_NULL X_OPEN_BRACKET expression X_CLOSE_BRACKET

fType ::= F_KEY_TYPE X_OPEN_BRACKET expression X_CLOSE_BRACKET

fStrlen ::= F_KEY_STRLEN X_OPEN_BRACKET expression X_CLOSE_BRACKET

body ::= (block | statement) {
    methods=[getStatements];
}

block ::= KEY_BEGIN statementWithEnding* KEY_END {
    pin=3
}

private statementWithEnding ::= statement X_SEMICOLON {
    pin=1
}

blockDefine ::= KEY_BEGIN (varDef X_SEMICOLON)* KEY_END

varName ::= IDENTIFIER

valNumber ::= OP_MINUS? V_NUMBER
